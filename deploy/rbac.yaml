---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dcd-controller
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dcd-controller
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  # Add any other necessary permissions here
  # For example, you might need permissions for custom resources:
  # - apiGroups: ["dynamicmemory.k8s.io"]
  #   resources: ["dynamiccapacitydevices"]
  #   verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dcd-controller
subjects:
- kind: ServiceAccount
  name: dcd-controller
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: dcd-controller
  apiGroup: rbac.authorization.k8s.io

# This RBAC configuration creates a ServiceAccount for the DCD controller,
# a ClusterRole with the necessary permissions, and a ClusterRoleBinding
# to associate the ServiceAccount with the ClusterRole.
# You may need to adjust the permissions based on your specific implementation
# and any custom resources you define for the dynamic memory feature.